# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package BloomFilter;
use base qw(Exporter);
use base qw(DynaLoader);
package BloomFilterc;
bootstrap BloomFilter;
package BloomFilter;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package BloomFilter;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package BloomFilter;

*insertSeq = *BloomFilterc::insertSeq;

############# Class : BloomFilter::SizetVector ##############

package BloomFilter::SizetVector;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( BloomFilter );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = BloomFilterc::new_SizetVector(@_);
    bless $self, $pkg if defined($self);
}

*size = *BloomFilterc::SizetVector_size;
*empty = *BloomFilterc::SizetVector_empty;
*clear = *BloomFilterc::SizetVector_clear;
*push = *BloomFilterc::SizetVector_push;
*pop = *BloomFilterc::SizetVector_pop;
*get = *BloomFilterc::SizetVector_get;
*set = *BloomFilterc::SizetVector_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        BloomFilterc::delete_SizetVector($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : BloomFilter::BloomFilter ##############

package BloomFilter::BloomFilter;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( BloomFilter );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        BloomFilterc::delete_BloomFilter($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = BloomFilterc::new_BloomFilter(@_);
    bless $self, $pkg if defined($self);
}

*insert = *BloomFilterc::BloomFilter_insert;
*contains = *BloomFilterc::BloomFilter_contains;
*storeFilter = *BloomFilterc::BloomFilter_storeFilter;
*getPop = *BloomFilterc::BloomFilter_getPop;
*getHashNum = *BloomFilterc::BloomFilter_getHashNum;
*getKmerSize = *BloomFilterc::BloomFilter_getKmerSize;
*getFilterSize = *BloomFilterc::BloomFilter_getFilterSize;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package BloomFilter;

1;
